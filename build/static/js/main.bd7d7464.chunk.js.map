{"version":3,"sources":["widget/Cancelbutton .png","widget/call.png","widget/CallWidget.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DialogTitle","withStyles","theme","root","dialogTitle","backgroundColor","width","textAlign","marginLeft","marginRight","marginTop","borderTopRightRadius","borderTopLeftRadius","dialog","color","fontWeight","props","children","classes","className","Typography","variant","DialogContent","dialogContent","paddingBottom","cursor","borderBottomRightRadius","borderBottomLeftRadius","borderRadius","CallIcon","height","src","alt","DialogActions","cancelButton","onClose","dialogActions","IconButton","aria-label","onClick","CancelIcon","CallWidget","React","useState","open","setOpen","nasaData","setData","a","fetch","res","json","data","useEffect","fetchData","handleClose","console","log","labels","phone_number","onValue","Button","Dialog","aria-labelledby","id","autoFocus","App","state","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd7d7464.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Cancelbutton .19143c0f.png\";","module.exports = __webpack_public_path__ + \"static/media/call.0fd7213f.png\";","import React, { useEffect } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CancelIcon from './Cancelbutton .png';\nimport CallIcon from './call.png';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles = (theme) => ({\n  root: {\n  },\n  dialogTitle:{\n    backgroundColor:'#000000',\n    width:'300px',\n    textAlign : 'center',\n    marginLeft:'10px',\n    marginRight:'25px',\n    marginTop:'2px',\n    borderTopRightRadius:'20px',\n    borderTopLeftRadius:'20px',\n  },\n  dialog:{\n    color:'white',\n    fontWeight:'bold',\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes } = props;\n  return (\n    <MuiDialogTitle  className={classes.dialogTitle} >\n      <Typography className={classes.dialog} variant=\"h6\">{children}</Typography>\n    </MuiDialogTitle>\n  );\n});\n\nconst contentStyles = (theme) => ({\n  dialogContent:{\n    textAlign : 'center',\n    backgroundColor:'black',\n    paddingBottom: '30px',\n    cursor:'pointer',\n    marginLeft:'10px',\n    marginRight:'25px',\n    borderBottomRightRadius:'20px',\n    borderBottomLeftRadius:'20px',\n    \n  },\n  dialog:{\n    backgroundColor:'#AFEF8A',\n    borderRadius:'20px',\n    color:'green',\n    fontWeight:'bold',\n  },\n  CallIcon:{\n    height:'20px',\n    width:'20px',\n    marginTop:'12px',\n  }\n  \n}) \n\nconst DialogContent = withStyles(contentStyles)((props) => {\n  const { children, classes,  } = props;\n  return (\n    <MuiDialogContent  className={classes.dialogContent} >\n      <Typography className={classes.dialog} variant=\"h6\">\n        <img src={CallIcon} className={classes.CallIcon} alt=\"callIcon\"/> {children}</Typography>\n    </MuiDialogContent>\n  );\n});\n\nconst actionsstyles = (theme) => ({\n  cancelButton:{\n    textAlign: 'right',\n    height:'50px',\n    width:'50px'\n  }  \n}) \n\n\nconst DialogActions = withStyles(actionsstyles)((props) => {\n  const {  classes, onClose,  } = props;\n  return (\n    <MuiDialogActions  className={classes.dialogActions} >\n      {onClose ? null :\n      (         \n      <IconButton aria-label=\"close\"  onClick={onClose}>\n      <img src={CancelIcon} className={classes.cancelButton} alt=\"cancel button\"/>\n     </IconButton>\n    )}\n    </MuiDialogActions>\n  );\n});\n\n\nexport default function CallWidget() {\n  const [open, setOpen] = React.useState(false);\n  const [nasaData,  setData] = React.useState({ });\n\n  async function fetchData() {\n    const res = await fetch(\"https://codifyinditest.com/script_test/api-test/\")\n    const data = await res.json()\n    setData(data)\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n  \n  const handleClickOpen = () => {\n    setOpen(true);\n    console.log('clicked true');\n  };\n  const handleClose = () => {\n    console.log('clicked true');\n    setOpen(false);\n  };\n\n  const { labels, phone_number } = nasaData['script test'] || {};\n\n  const onValue = nasaData['script test'];\n  console.log('apple', onValue);\n\n    \n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen}>\n        Call Us Now\n      </Button>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {labels}\n        </DialogTitle>\n        <DialogContent id=\"customized-dialog-content\" >\n            {phone_number}\n        </DialogContent>\n        <DialogActions id=\"customized-dialog-content\">\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            {CancelIcon}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport CallWidget from './widget/CallWidget';\n\nclass App extends Component {\n  constructor(props)  {\n    super(props);\n    this.state = {\n    }\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CallWidget/>\n      </header>\n    </div>\n  );\n}\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}